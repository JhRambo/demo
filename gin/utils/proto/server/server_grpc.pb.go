// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerDB_ServerList_FullMethodName             = "/ServerDB/ServerList"
	ServerDB_GetRenderServerList_FullMethodName    = "/ServerDB/GetRenderServerList"
	ServerDB_GetRenderServerInfo_FullMethodName    = "/ServerDB/GetRenderServerInfo"
	ServerDB_UpdateRenderServerInfo_FullMethodName = "/ServerDB/UpdateRenderServerInfo"
	ServerDB_GetFbxUploadUrl_FullMethodName        = "/ServerDB/GetFbxUploadUrl"
	ServerDB_StartUE_FullMethodName                = "/ServerDB/StartUE"
	ServerDB_GetVersionList_FullMethodName         = "/ServerDB/GetVersionList"
	ServerDB_VersionDownLoad_FullMethodName        = "/ServerDB/VersionDownLoad"
	ServerDB_GetVersionInfo_FullMethodName         = "/ServerDB/GetVersionInfo"
	ServerDB_CheckPakServerRestart_FullMethodName  = "/ServerDB/CheckPakServerRestart"
	ServerDB_PushParseFileList_FullMethodName      = "/ServerDB/PushParseFileList"
	ServerDB_DownLoadParseFile_FullMethodName      = "/ServerDB/DownLoadParseFile"
	ServerDB_GetLogFile_FullMethodName             = "/ServerDB/GetLogFile"
	ServerDB_StartProxy_FullMethodName             = "/ServerDB/StartProxy"
	ServerDB_RestartSyncServer_FullMethodName      = "/ServerDB/RestartSyncServer"
	ServerDB_ServerDeviceOut_FullMethodName        = "/ServerDB/ServerDeviceOut"
	ServerDB_ServersRestartSteam_FullMethodName    = "/ServerDB/ServersRestartSteam"
	ServerDB_ServersRestartApp_FullMethodName      = "/ServerDB/ServersRestartApp"
	ServerDB_ServersAddr_FullMethodName            = "/ServerDB/ServersAddr"
	ServerDB_RestartServer_FullMethodName          = "/ServerDB/RestartServer"
	ServerDB_GetUpdateFiles_FullMethodName         = "/ServerDB/GetUpdateFiles"
	ServerDB_UpdateVersion_FullMethodName          = "/ServerDB/UpdateVersion"
)

// ServerDBClient is the client API for ServerDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerDBClient interface {
	// 获取服务器列表
	ServerList(ctx context.Context, in *ServerListRequest, opts ...grpc.CallOption) (*ServerListResponse, error)
	// 获取渲染服地址
	GetRenderServerList(ctx context.Context, in *GetRenderServerListRequest, opts ...grpc.CallOption) (*GetRenderServerListResponse, error)
	// 获取服务器信息
	GetRenderServerInfo(ctx context.Context, in *GetRenderServerInfoRequest, opts ...grpc.CallOption) (*GetRenderServerInfoResponse, error)
	// 获取服务器信息
	UpdateRenderServerInfo(ctx context.Context, in *UpdateRenderServerInfoRequest, opts ...grpc.CallOption) (*UpdateRenderServerInfoResponse, error)
	// 获取解析服地址
	GetFbxUploadUrl(ctx context.Context, in *GetFbxUploadUrlRequest, opts ...grpc.CallOption) (*GetFbxUploadUrlResponse, error)
	// 获取设备连接地址
	StartUE(ctx context.Context, in *StartUERequest, opts ...grpc.CallOption) (*StartUEResponse, error)
	// 版本列表
	GetVersionList(ctx context.Context, in *GetVersionListRequest, opts ...grpc.CallOption) (*GetVersionListResponse, error)
	// 下载obs版本
	VersionDownLoad(ctx context.Context, in *VersionDownLoadRequest, opts ...grpc.CallOption) (*VersionDownLoadResponse, error)
	// 获取版本信息
	GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error)
	// 获取版本信息
	CheckPakServerRestart(ctx context.Context, in *CheckPakServerRestartRequest, opts ...grpc.CallOption) (*CheckPakServerRestartResponse, error)
	// 解析服重启（给解析服推送未解析文件 ）
	PushParseFileList(ctx context.Context, in *PushParseFileListRequest, opts ...grpc.CallOption) (*PushParseFileListResponse, error)
	// 获取版本信息
	DownLoadParseFile(ctx context.Context, in *DownLoadParseFileRequest, opts ...grpc.CallOption) (*DownLoadParseFileResponse, error)
	// 获取服务器日志文件列表
	GetLogFile(ctx context.Context, in *GetLogFileRequest, opts ...grpc.CallOption) (*GetLogFileResponse, error)
	// 请求开启代理
	StartProxy(ctx context.Context, opts ...grpc.CallOption) (ServerDB_StartProxyClient, error)
	// 同步服重启
	RestartSyncServer(ctx context.Context, in *RestartSyncServerRequest, opts ...grpc.CallOption) (*RestartSyncServerResponse, error)
	// 渲染/代理服务器踢出设备
	ServerDeviceOut(ctx context.Context, in *ServerDeviceOutRequest, opts ...grpc.CallOption) (*ServerDeviceOutResponse, error)
	// 渲染/代理服务器重启Steam
	ServersRestartSteam(ctx context.Context, in *ServersRestartSteamRequest, opts ...grpc.CallOption) (*ServersRestartSteamResponse, error)
	// 渲染/代理服务器重启App
	ServersRestartApp(ctx context.Context, in *ServersRestartAppRequest, opts ...grpc.CallOption) (*ServersRestartAppResponse, error)
	// 分配渲染/代理服务器地址
	ServersAddr(ctx context.Context, in *ServersAddrRequest, opts ...grpc.CallOption) (*ServersAddrResponse, error)
	// 同步/解析强制重启服务器
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	// 获取服务器更新文件
	GetUpdateFiles(ctx context.Context, in *GetUpdateFilesRequest, opts ...grpc.CallOption) (*GetUpdateFilesResponse, error)
	// 服务器更新
	UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error)
}

type serverDBClient struct {
	cc grpc.ClientConnInterface
}

func NewServerDBClient(cc grpc.ClientConnInterface) ServerDBClient {
	return &serverDBClient{cc}
}

func (c *serverDBClient) ServerList(ctx context.Context, in *ServerListRequest, opts ...grpc.CallOption) (*ServerListResponse, error) {
	out := new(ServerListResponse)
	err := c.cc.Invoke(ctx, ServerDB_ServerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetRenderServerList(ctx context.Context, in *GetRenderServerListRequest, opts ...grpc.CallOption) (*GetRenderServerListResponse, error) {
	out := new(GetRenderServerListResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetRenderServerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetRenderServerInfo(ctx context.Context, in *GetRenderServerInfoRequest, opts ...grpc.CallOption) (*GetRenderServerInfoResponse, error) {
	out := new(GetRenderServerInfoResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetRenderServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) UpdateRenderServerInfo(ctx context.Context, in *UpdateRenderServerInfoRequest, opts ...grpc.CallOption) (*UpdateRenderServerInfoResponse, error) {
	out := new(UpdateRenderServerInfoResponse)
	err := c.cc.Invoke(ctx, ServerDB_UpdateRenderServerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetFbxUploadUrl(ctx context.Context, in *GetFbxUploadUrlRequest, opts ...grpc.CallOption) (*GetFbxUploadUrlResponse, error) {
	out := new(GetFbxUploadUrlResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetFbxUploadUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) StartUE(ctx context.Context, in *StartUERequest, opts ...grpc.CallOption) (*StartUEResponse, error) {
	out := new(StartUEResponse)
	err := c.cc.Invoke(ctx, ServerDB_StartUE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetVersionList(ctx context.Context, in *GetVersionListRequest, opts ...grpc.CallOption) (*GetVersionListResponse, error) {
	out := new(GetVersionListResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetVersionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) VersionDownLoad(ctx context.Context, in *VersionDownLoadRequest, opts ...grpc.CallOption) (*VersionDownLoadResponse, error) {
	out := new(VersionDownLoadResponse)
	err := c.cc.Invoke(ctx, ServerDB_VersionDownLoad_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetVersionInfo(ctx context.Context, in *GetVersionInfoRequest, opts ...grpc.CallOption) (*GetVersionInfoResponse, error) {
	out := new(GetVersionInfoResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetVersionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) CheckPakServerRestart(ctx context.Context, in *CheckPakServerRestartRequest, opts ...grpc.CallOption) (*CheckPakServerRestartResponse, error) {
	out := new(CheckPakServerRestartResponse)
	err := c.cc.Invoke(ctx, ServerDB_CheckPakServerRestart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) PushParseFileList(ctx context.Context, in *PushParseFileListRequest, opts ...grpc.CallOption) (*PushParseFileListResponse, error) {
	out := new(PushParseFileListResponse)
	err := c.cc.Invoke(ctx, ServerDB_PushParseFileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) DownLoadParseFile(ctx context.Context, in *DownLoadParseFileRequest, opts ...grpc.CallOption) (*DownLoadParseFileResponse, error) {
	out := new(DownLoadParseFileResponse)
	err := c.cc.Invoke(ctx, ServerDB_DownLoadParseFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetLogFile(ctx context.Context, in *GetLogFileRequest, opts ...grpc.CallOption) (*GetLogFileResponse, error) {
	out := new(GetLogFileResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetLogFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) StartProxy(ctx context.Context, opts ...grpc.CallOption) (ServerDB_StartProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerDB_ServiceDesc.Streams[0], ServerDB_StartProxy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverDBStartProxyClient{stream}
	return x, nil
}

type ServerDB_StartProxyClient interface {
	Send(*ProxyData) error
	Recv() (*ProxyData, error)
	grpc.ClientStream
}

type serverDBStartProxyClient struct {
	grpc.ClientStream
}

func (x *serverDBStartProxyClient) Send(m *ProxyData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverDBStartProxyClient) Recv() (*ProxyData, error) {
	m := new(ProxyData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverDBClient) RestartSyncServer(ctx context.Context, in *RestartSyncServerRequest, opts ...grpc.CallOption) (*RestartSyncServerResponse, error) {
	out := new(RestartSyncServerResponse)
	err := c.cc.Invoke(ctx, ServerDB_RestartSyncServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) ServerDeviceOut(ctx context.Context, in *ServerDeviceOutRequest, opts ...grpc.CallOption) (*ServerDeviceOutResponse, error) {
	out := new(ServerDeviceOutResponse)
	err := c.cc.Invoke(ctx, ServerDB_ServerDeviceOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) ServersRestartSteam(ctx context.Context, in *ServersRestartSteamRequest, opts ...grpc.CallOption) (*ServersRestartSteamResponse, error) {
	out := new(ServersRestartSteamResponse)
	err := c.cc.Invoke(ctx, ServerDB_ServersRestartSteam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) ServersRestartApp(ctx context.Context, in *ServersRestartAppRequest, opts ...grpc.CallOption) (*ServersRestartAppResponse, error) {
	out := new(ServersRestartAppResponse)
	err := c.cc.Invoke(ctx, ServerDB_ServersRestartApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) ServersAddr(ctx context.Context, in *ServersAddrRequest, opts ...grpc.CallOption) (*ServersAddrResponse, error) {
	out := new(ServersAddrResponse)
	err := c.cc.Invoke(ctx, ServerDB_ServersAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, ServerDB_RestartServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) GetUpdateFiles(ctx context.Context, in *GetUpdateFilesRequest, opts ...grpc.CallOption) (*GetUpdateFilesResponse, error) {
	out := new(GetUpdateFilesResponse)
	err := c.cc.Invoke(ctx, ServerDB_GetUpdateFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDBClient) UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*UpdateVersionResponse, error) {
	out := new(UpdateVersionResponse)
	err := c.cc.Invoke(ctx, ServerDB_UpdateVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerDBServer is the server API for ServerDB service.
// All implementations must embed UnimplementedServerDBServer
// for forward compatibility
type ServerDBServer interface {
	// 获取服务器列表
	ServerList(context.Context, *ServerListRequest) (*ServerListResponse, error)
	// 获取渲染服地址
	GetRenderServerList(context.Context, *GetRenderServerListRequest) (*GetRenderServerListResponse, error)
	// 获取服务器信息
	GetRenderServerInfo(context.Context, *GetRenderServerInfoRequest) (*GetRenderServerInfoResponse, error)
	// 获取服务器信息
	UpdateRenderServerInfo(context.Context, *UpdateRenderServerInfoRequest) (*UpdateRenderServerInfoResponse, error)
	// 获取解析服地址
	GetFbxUploadUrl(context.Context, *GetFbxUploadUrlRequest) (*GetFbxUploadUrlResponse, error)
	// 获取设备连接地址
	StartUE(context.Context, *StartUERequest) (*StartUEResponse, error)
	// 版本列表
	GetVersionList(context.Context, *GetVersionListRequest) (*GetVersionListResponse, error)
	// 下载obs版本
	VersionDownLoad(context.Context, *VersionDownLoadRequest) (*VersionDownLoadResponse, error)
	// 获取版本信息
	GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error)
	// 获取版本信息
	CheckPakServerRestart(context.Context, *CheckPakServerRestartRequest) (*CheckPakServerRestartResponse, error)
	// 解析服重启（给解析服推送未解析文件 ）
	PushParseFileList(context.Context, *PushParseFileListRequest) (*PushParseFileListResponse, error)
	// 获取版本信息
	DownLoadParseFile(context.Context, *DownLoadParseFileRequest) (*DownLoadParseFileResponse, error)
	// 获取服务器日志文件列表
	GetLogFile(context.Context, *GetLogFileRequest) (*GetLogFileResponse, error)
	// 请求开启代理
	StartProxy(ServerDB_StartProxyServer) error
	// 同步服重启
	RestartSyncServer(context.Context, *RestartSyncServerRequest) (*RestartSyncServerResponse, error)
	// 渲染/代理服务器踢出设备
	ServerDeviceOut(context.Context, *ServerDeviceOutRequest) (*ServerDeviceOutResponse, error)
	// 渲染/代理服务器重启Steam
	ServersRestartSteam(context.Context, *ServersRestartSteamRequest) (*ServersRestartSteamResponse, error)
	// 渲染/代理服务器重启App
	ServersRestartApp(context.Context, *ServersRestartAppRequest) (*ServersRestartAppResponse, error)
	// 分配渲染/代理服务器地址
	ServersAddr(context.Context, *ServersAddrRequest) (*ServersAddrResponse, error)
	// 同步/解析强制重启服务器
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	// 获取服务器更新文件
	GetUpdateFiles(context.Context, *GetUpdateFilesRequest) (*GetUpdateFilesResponse, error)
	// 服务器更新
	UpdateVersion(context.Context, *UpdateVersionRequest) (*UpdateVersionResponse, error)
	mustEmbedUnimplementedServerDBServer()
}

// UnimplementedServerDBServer must be embedded to have forward compatible implementations.
type UnimplementedServerDBServer struct {
}

func (UnimplementedServerDBServer) ServerList(context.Context, *ServerListRequest) (*ServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerList not implemented")
}
func (UnimplementedServerDBServer) GetRenderServerList(context.Context, *GetRenderServerListRequest) (*GetRenderServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderServerList not implemented")
}
func (UnimplementedServerDBServer) GetRenderServerInfo(context.Context, *GetRenderServerInfoRequest) (*GetRenderServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderServerInfo not implemented")
}
func (UnimplementedServerDBServer) UpdateRenderServerInfo(context.Context, *UpdateRenderServerInfoRequest) (*UpdateRenderServerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRenderServerInfo not implemented")
}
func (UnimplementedServerDBServer) GetFbxUploadUrl(context.Context, *GetFbxUploadUrlRequest) (*GetFbxUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFbxUploadUrl not implemented")
}
func (UnimplementedServerDBServer) StartUE(context.Context, *StartUERequest) (*StartUEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUE not implemented")
}
func (UnimplementedServerDBServer) GetVersionList(context.Context, *GetVersionListRequest) (*GetVersionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionList not implemented")
}
func (UnimplementedServerDBServer) VersionDownLoad(context.Context, *VersionDownLoadRequest) (*VersionDownLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionDownLoad not implemented")
}
func (UnimplementedServerDBServer) GetVersionInfo(context.Context, *GetVersionInfoRequest) (*GetVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedServerDBServer) CheckPakServerRestart(context.Context, *CheckPakServerRestartRequest) (*CheckPakServerRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPakServerRestart not implemented")
}
func (UnimplementedServerDBServer) PushParseFileList(context.Context, *PushParseFileListRequest) (*PushParseFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushParseFileList not implemented")
}
func (UnimplementedServerDBServer) DownLoadParseFile(context.Context, *DownLoadParseFileRequest) (*DownLoadParseFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoadParseFile not implemented")
}
func (UnimplementedServerDBServer) GetLogFile(context.Context, *GetLogFileRequest) (*GetLogFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogFile not implemented")
}
func (UnimplementedServerDBServer) StartProxy(ServerDB_StartProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method StartProxy not implemented")
}
func (UnimplementedServerDBServer) RestartSyncServer(context.Context, *RestartSyncServerRequest) (*RestartSyncServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartSyncServer not implemented")
}
func (UnimplementedServerDBServer) ServerDeviceOut(context.Context, *ServerDeviceOutRequest) (*ServerDeviceOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerDeviceOut not implemented")
}
func (UnimplementedServerDBServer) ServersRestartSteam(context.Context, *ServersRestartSteamRequest) (*ServersRestartSteamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersRestartSteam not implemented")
}
func (UnimplementedServerDBServer) ServersRestartApp(context.Context, *ServersRestartAppRequest) (*ServersRestartAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersRestartApp not implemented")
}
func (UnimplementedServerDBServer) ServersAddr(context.Context, *ServersAddrRequest) (*ServersAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAddr not implemented")
}
func (UnimplementedServerDBServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedServerDBServer) GetUpdateFiles(context.Context, *GetUpdateFilesRequest) (*GetUpdateFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateFiles not implemented")
}
func (UnimplementedServerDBServer) UpdateVersion(context.Context, *UpdateVersionRequest) (*UpdateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersion not implemented")
}
func (UnimplementedServerDBServer) mustEmbedUnimplementedServerDBServer() {}

// UnsafeServerDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerDBServer will
// result in compilation errors.
type UnsafeServerDBServer interface {
	mustEmbedUnimplementedServerDBServer()
}

func RegisterServerDBServer(s grpc.ServiceRegistrar, srv ServerDBServer) {
	s.RegisterService(&ServerDB_ServiceDesc, srv)
}

func _ServerDB_ServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).ServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_ServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).ServerList(ctx, req.(*ServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetRenderServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetRenderServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetRenderServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetRenderServerList(ctx, req.(*GetRenderServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetRenderServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetRenderServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetRenderServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetRenderServerInfo(ctx, req.(*GetRenderServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_UpdateRenderServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRenderServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).UpdateRenderServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_UpdateRenderServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).UpdateRenderServerInfo(ctx, req.(*UpdateRenderServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetFbxUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFbxUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetFbxUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetFbxUploadUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetFbxUploadUrl(ctx, req.(*GetFbxUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_StartUE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartUERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).StartUE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_StartUE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).StartUE(ctx, req.(*StartUERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetVersionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetVersionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetVersionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetVersionList(ctx, req.(*GetVersionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_VersionDownLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionDownLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).VersionDownLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_VersionDownLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).VersionDownLoad(ctx, req.(*VersionDownLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetVersionInfo(ctx, req.(*GetVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_CheckPakServerRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPakServerRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).CheckPakServerRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_CheckPakServerRestart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).CheckPakServerRestart(ctx, req.(*CheckPakServerRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_PushParseFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushParseFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).PushParseFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_PushParseFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).PushParseFileList(ctx, req.(*PushParseFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_DownLoadParseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownLoadParseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).DownLoadParseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_DownLoadParseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).DownLoadParseFile(ctx, req.(*DownLoadParseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetLogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetLogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetLogFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetLogFile(ctx, req.(*GetLogFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_StartProxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerDBServer).StartProxy(&serverDBStartProxyServer{stream})
}

type ServerDB_StartProxyServer interface {
	Send(*ProxyData) error
	Recv() (*ProxyData, error)
	grpc.ServerStream
}

type serverDBStartProxyServer struct {
	grpc.ServerStream
}

func (x *serverDBStartProxyServer) Send(m *ProxyData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverDBStartProxyServer) Recv() (*ProxyData, error) {
	m := new(ProxyData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServerDB_RestartSyncServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartSyncServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).RestartSyncServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_RestartSyncServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).RestartSyncServer(ctx, req.(*RestartSyncServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_ServerDeviceOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerDeviceOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).ServerDeviceOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_ServerDeviceOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).ServerDeviceOut(ctx, req.(*ServerDeviceOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_ServersRestartSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRestartSteamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).ServersRestartSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_ServersRestartSteam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).ServersRestartSteam(ctx, req.(*ServersRestartSteamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_ServersRestartApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRestartAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).ServersRestartApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_ServersRestartApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).ServersRestartApp(ctx, req.(*ServersRestartAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_ServersAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).ServersAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_ServersAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).ServersAddr(ctx, req.(*ServersAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_RestartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_GetUpdateFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).GetUpdateFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_GetUpdateFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).GetUpdateFiles(ctx, req.(*GetUpdateFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDB_UpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDBServer).UpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerDB_UpdateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDBServer).UpdateVersion(ctx, req.(*UpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerDB_ServiceDesc is the grpc.ServiceDesc for ServerDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerDB",
	HandlerType: (*ServerDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerList",
			Handler:    _ServerDB_ServerList_Handler,
		},
		{
			MethodName: "GetRenderServerList",
			Handler:    _ServerDB_GetRenderServerList_Handler,
		},
		{
			MethodName: "GetRenderServerInfo",
			Handler:    _ServerDB_GetRenderServerInfo_Handler,
		},
		{
			MethodName: "UpdateRenderServerInfo",
			Handler:    _ServerDB_UpdateRenderServerInfo_Handler,
		},
		{
			MethodName: "GetFbxUploadUrl",
			Handler:    _ServerDB_GetFbxUploadUrl_Handler,
		},
		{
			MethodName: "StartUE",
			Handler:    _ServerDB_StartUE_Handler,
		},
		{
			MethodName: "GetVersionList",
			Handler:    _ServerDB_GetVersionList_Handler,
		},
		{
			MethodName: "VersionDownLoad",
			Handler:    _ServerDB_VersionDownLoad_Handler,
		},
		{
			MethodName: "GetVersionInfo",
			Handler:    _ServerDB_GetVersionInfo_Handler,
		},
		{
			MethodName: "CheckPakServerRestart",
			Handler:    _ServerDB_CheckPakServerRestart_Handler,
		},
		{
			MethodName: "PushParseFileList",
			Handler:    _ServerDB_PushParseFileList_Handler,
		},
		{
			MethodName: "DownLoadParseFile",
			Handler:    _ServerDB_DownLoadParseFile_Handler,
		},
		{
			MethodName: "GetLogFile",
			Handler:    _ServerDB_GetLogFile_Handler,
		},
		{
			MethodName: "RestartSyncServer",
			Handler:    _ServerDB_RestartSyncServer_Handler,
		},
		{
			MethodName: "ServerDeviceOut",
			Handler:    _ServerDB_ServerDeviceOut_Handler,
		},
		{
			MethodName: "ServersRestartSteam",
			Handler:    _ServerDB_ServersRestartSteam_Handler,
		},
		{
			MethodName: "ServersRestartApp",
			Handler:    _ServerDB_ServersRestartApp_Handler,
		},
		{
			MethodName: "ServersAddr",
			Handler:    _ServerDB_ServersAddr_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _ServerDB_RestartServer_Handler,
		},
		{
			MethodName: "GetUpdateFiles",
			Handler:    _ServerDB_GetUpdateFiles_Handler,
		},
		{
			MethodName: "UpdateVersion",
			Handler:    _ServerDB_UpdateVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartProxy",
			Handler:       _ServerDB_StartProxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}

const (
	ServerHttp_GetServerList_FullMethodName       = "/ServerHttp/GetServerList"
	ServerHttp_GetRenderServerList_FullMethodName = "/ServerHttp/GetRenderServerList"
	ServerHttp_StartVR_FullMethodName             = "/ServerHttp/StartVR"
	ServerHttp_StartPlanet_FullMethodName         = "/ServerHttp/StartPlanet"
	ServerHttp_GetLogFileList_FullMethodName      = "/ServerHttp/GetLogFileList"
	ServerHttp_GetInternalList_FullMethodName     = "/ServerHttp/GetInternalList"
	ServerHttp_ServerDeviceOut_FullMethodName     = "/ServerHttp/ServerDeviceOut"
	ServerHttp_ServersRestartSteam_FullMethodName = "/ServerHttp/ServersRestartSteam"
	ServerHttp_ServersRestartApp_FullMethodName   = "/ServerHttp/ServersRestartApp"
	ServerHttp_ServersAddr_FullMethodName         = "/ServerHttp/ServersAddr"
	ServerHttp_RestartServer_FullMethodName       = "/ServerHttp/RestartServer"
	ServerHttp_GetUpdateFiles_FullMethodName      = "/ServerHttp/GetUpdateFiles"
	ServerHttp_UpdateServer_FullMethodName        = "/ServerHttp/UpdateServer"
)

// ServerHttpClient is the client API for ServerHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerHttpClient interface {
	GetServerList(ctx context.Context, in *GetServerListRequest, opts ...grpc.CallOption) (*GetServerListResponse, error)
	// 获取渲染服服务列表
	GetRenderServerList(ctx context.Context, in *GetRenderServerListRequest, opts ...grpc.CallOption) (*GetRenderServerListResponse, error)
	StartVR(ctx context.Context, in *StartVRRequest, opts ...grpc.CallOption) (*StartVRResponse, error)
	StartPlanet(ctx context.Context, in *StartPlanetRequest, opts ...grpc.CallOption) (*StartPlanetResponse, error)
	GetLogFileList(ctx context.Context, in *GetLogFileListRequest, opts ...grpc.CallOption) (*GetLogFileListResponse, error)
	// 内网更新,获取相同服务器内网地址
	GetInternalList(ctx context.Context, in *GetInternalListRequest, opts ...grpc.CallOption) (*GetInternalListResponse, error)
	// 渲染/代理服务器踢出设备
	ServerDeviceOut(ctx context.Context, in *ServerDeviceOutRequest, opts ...grpc.CallOption) (*ServerDeviceOutResponse, error)
	// 渲染/代理服务器重启Steam
	ServersRestartSteam(ctx context.Context, in *ServersRestartSteamRequest, opts ...grpc.CallOption) (*ServersRestartSteamResponse, error)
	// 渲染/代理服务器重启App
	ServersRestartApp(ctx context.Context, in *ServersRestartAppRequest, opts ...grpc.CallOption) (*ServersRestartAppResponse, error)
	// 获取空闲渲染/代理服地址
	ServersAddr(ctx context.Context, in *ServersAddrRequest, opts ...grpc.CallOption) (*ServersAddrResponse, error)
	// 同步/解析强制重启服务器
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	// 获取更新版本列表
	GetUpdateFiles(ctx context.Context, in *GetServerUpdateFilesRequest, opts ...grpc.CallOption) (*GetServerUpdateFilesResponse, error)
	// 服务器更新
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error)
}

type serverHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewServerHttpClient(cc grpc.ClientConnInterface) ServerHttpClient {
	return &serverHttpClient{cc}
}

func (c *serverHttpClient) GetServerList(ctx context.Context, in *GetServerListRequest, opts ...grpc.CallOption) (*GetServerListResponse, error) {
	out := new(GetServerListResponse)
	err := c.cc.Invoke(ctx, ServerHttp_GetServerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) GetRenderServerList(ctx context.Context, in *GetRenderServerListRequest, opts ...grpc.CallOption) (*GetRenderServerListResponse, error) {
	out := new(GetRenderServerListResponse)
	err := c.cc.Invoke(ctx, ServerHttp_GetRenderServerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) StartVR(ctx context.Context, in *StartVRRequest, opts ...grpc.CallOption) (*StartVRResponse, error) {
	out := new(StartVRResponse)
	err := c.cc.Invoke(ctx, ServerHttp_StartVR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) StartPlanet(ctx context.Context, in *StartPlanetRequest, opts ...grpc.CallOption) (*StartPlanetResponse, error) {
	out := new(StartPlanetResponse)
	err := c.cc.Invoke(ctx, ServerHttp_StartPlanet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) GetLogFileList(ctx context.Context, in *GetLogFileListRequest, opts ...grpc.CallOption) (*GetLogFileListResponse, error) {
	out := new(GetLogFileListResponse)
	err := c.cc.Invoke(ctx, ServerHttp_GetLogFileList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) GetInternalList(ctx context.Context, in *GetInternalListRequest, opts ...grpc.CallOption) (*GetInternalListResponse, error) {
	out := new(GetInternalListResponse)
	err := c.cc.Invoke(ctx, ServerHttp_GetInternalList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) ServerDeviceOut(ctx context.Context, in *ServerDeviceOutRequest, opts ...grpc.CallOption) (*ServerDeviceOutResponse, error) {
	out := new(ServerDeviceOutResponse)
	err := c.cc.Invoke(ctx, ServerHttp_ServerDeviceOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) ServersRestartSteam(ctx context.Context, in *ServersRestartSteamRequest, opts ...grpc.CallOption) (*ServersRestartSteamResponse, error) {
	out := new(ServersRestartSteamResponse)
	err := c.cc.Invoke(ctx, ServerHttp_ServersRestartSteam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) ServersRestartApp(ctx context.Context, in *ServersRestartAppRequest, opts ...grpc.CallOption) (*ServersRestartAppResponse, error) {
	out := new(ServersRestartAppResponse)
	err := c.cc.Invoke(ctx, ServerHttp_ServersRestartApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) ServersAddr(ctx context.Context, in *ServersAddrRequest, opts ...grpc.CallOption) (*ServersAddrResponse, error) {
	out := new(ServersAddrResponse)
	err := c.cc.Invoke(ctx, ServerHttp_ServersAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, ServerHttp_RestartServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) GetUpdateFiles(ctx context.Context, in *GetServerUpdateFilesRequest, opts ...grpc.CallOption) (*GetServerUpdateFilesResponse, error) {
	out := new(GetServerUpdateFilesResponse)
	err := c.cc.Invoke(ctx, ServerHttp_GetUpdateFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverHttpClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*UpdateServerResponse, error) {
	out := new(UpdateServerResponse)
	err := c.cc.Invoke(ctx, ServerHttp_UpdateServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerHttpServer is the server API for ServerHttp service.
// All implementations must embed UnimplementedServerHttpServer
// for forward compatibility
type ServerHttpServer interface {
	GetServerList(context.Context, *GetServerListRequest) (*GetServerListResponse, error)
	// 获取渲染服服务列表
	GetRenderServerList(context.Context, *GetRenderServerListRequest) (*GetRenderServerListResponse, error)
	StartVR(context.Context, *StartVRRequest) (*StartVRResponse, error)
	StartPlanet(context.Context, *StartPlanetRequest) (*StartPlanetResponse, error)
	GetLogFileList(context.Context, *GetLogFileListRequest) (*GetLogFileListResponse, error)
	// 内网更新,获取相同服务器内网地址
	GetInternalList(context.Context, *GetInternalListRequest) (*GetInternalListResponse, error)
	// 渲染/代理服务器踢出设备
	ServerDeviceOut(context.Context, *ServerDeviceOutRequest) (*ServerDeviceOutResponse, error)
	// 渲染/代理服务器重启Steam
	ServersRestartSteam(context.Context, *ServersRestartSteamRequest) (*ServersRestartSteamResponse, error)
	// 渲染/代理服务器重启App
	ServersRestartApp(context.Context, *ServersRestartAppRequest) (*ServersRestartAppResponse, error)
	// 获取空闲渲染/代理服地址
	ServersAddr(context.Context, *ServersAddrRequest) (*ServersAddrResponse, error)
	// 同步/解析强制重启服务器
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	// 获取更新版本列表
	GetUpdateFiles(context.Context, *GetServerUpdateFilesRequest) (*GetServerUpdateFilesResponse, error)
	// 服务器更新
	UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error)
	mustEmbedUnimplementedServerHttpServer()
}

// UnimplementedServerHttpServer must be embedded to have forward compatible implementations.
type UnimplementedServerHttpServer struct {
}

func (UnimplementedServerHttpServer) GetServerList(context.Context, *GetServerListRequest) (*GetServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerList not implemented")
}
func (UnimplementedServerHttpServer) GetRenderServerList(context.Context, *GetRenderServerListRequest) (*GetRenderServerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderServerList not implemented")
}
func (UnimplementedServerHttpServer) StartVR(context.Context, *StartVRRequest) (*StartVRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVR not implemented")
}
func (UnimplementedServerHttpServer) StartPlanet(context.Context, *StartPlanetRequest) (*StartPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlanet not implemented")
}
func (UnimplementedServerHttpServer) GetLogFileList(context.Context, *GetLogFileListRequest) (*GetLogFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogFileList not implemented")
}
func (UnimplementedServerHttpServer) GetInternalList(context.Context, *GetInternalListRequest) (*GetInternalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalList not implemented")
}
func (UnimplementedServerHttpServer) ServerDeviceOut(context.Context, *ServerDeviceOutRequest) (*ServerDeviceOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerDeviceOut not implemented")
}
func (UnimplementedServerHttpServer) ServersRestartSteam(context.Context, *ServersRestartSteamRequest) (*ServersRestartSteamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersRestartSteam not implemented")
}
func (UnimplementedServerHttpServer) ServersRestartApp(context.Context, *ServersRestartAppRequest) (*ServersRestartAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersRestartApp not implemented")
}
func (UnimplementedServerHttpServer) ServersAddr(context.Context, *ServersAddrRequest) (*ServersAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAddr not implemented")
}
func (UnimplementedServerHttpServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedServerHttpServer) GetUpdateFiles(context.Context, *GetServerUpdateFilesRequest) (*GetServerUpdateFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateFiles not implemented")
}
func (UnimplementedServerHttpServer) UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedServerHttpServer) mustEmbedUnimplementedServerHttpServer() {}

// UnsafeServerHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerHttpServer will
// result in compilation errors.
type UnsafeServerHttpServer interface {
	mustEmbedUnimplementedServerHttpServer()
}

func RegisterServerHttpServer(s grpc.ServiceRegistrar, srv ServerHttpServer) {
	s.RegisterService(&ServerHttp_ServiceDesc, srv)
}

func _ServerHttp_GetServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).GetServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_GetServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).GetServerList(ctx, req.(*GetServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_GetRenderServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).GetRenderServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_GetRenderServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).GetRenderServerList(ctx, req.(*GetRenderServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_StartVR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).StartVR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_StartVR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).StartVR(ctx, req.(*StartVRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_StartPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).StartPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_StartPlanet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).StartPlanet(ctx, req.(*StartPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_GetLogFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).GetLogFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_GetLogFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).GetLogFileList(ctx, req.(*GetLogFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_GetInternalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).GetInternalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_GetInternalList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).GetInternalList(ctx, req.(*GetInternalListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_ServerDeviceOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerDeviceOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).ServerDeviceOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_ServerDeviceOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).ServerDeviceOut(ctx, req.(*ServerDeviceOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_ServersRestartSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRestartSteamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).ServersRestartSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_ServersRestartSteam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).ServersRestartSteam(ctx, req.(*ServersRestartSteamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_ServersRestartApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRestartAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).ServersRestartApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_ServersRestartApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).ServersRestartApp(ctx, req.(*ServersRestartAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_ServersAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).ServersAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_ServersAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).ServersAddr(ctx, req.(*ServersAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_RestartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_GetUpdateFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerUpdateFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).GetUpdateFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_GetUpdateFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).GetUpdateFiles(ctx, req.(*GetServerUpdateFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerHttp_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerHttpServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerHttp_UpdateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerHttpServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerHttp_ServiceDesc is the grpc.ServiceDesc for ServerHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerHttp",
	HandlerType: (*ServerHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerList",
			Handler:    _ServerHttp_GetServerList_Handler,
		},
		{
			MethodName: "GetRenderServerList",
			Handler:    _ServerHttp_GetRenderServerList_Handler,
		},
		{
			MethodName: "StartVR",
			Handler:    _ServerHttp_StartVR_Handler,
		},
		{
			MethodName: "StartPlanet",
			Handler:    _ServerHttp_StartPlanet_Handler,
		},
		{
			MethodName: "GetLogFileList",
			Handler:    _ServerHttp_GetLogFileList_Handler,
		},
		{
			MethodName: "GetInternalList",
			Handler:    _ServerHttp_GetInternalList_Handler,
		},
		{
			MethodName: "ServerDeviceOut",
			Handler:    _ServerHttp_ServerDeviceOut_Handler,
		},
		{
			MethodName: "ServersRestartSteam",
			Handler:    _ServerHttp_ServersRestartSteam_Handler,
		},
		{
			MethodName: "ServersRestartApp",
			Handler:    _ServerHttp_ServersRestartApp_Handler,
		},
		{
			MethodName: "ServersAddr",
			Handler:    _ServerHttp_ServersAddr_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _ServerHttp_RestartServer_Handler,
		},
		{
			MethodName: "GetUpdateFiles",
			Handler:    _ServerHttp_GetUpdateFiles_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _ServerHttp_UpdateServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
