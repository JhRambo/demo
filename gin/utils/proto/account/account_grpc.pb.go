// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountHttp_GetWebRegisterCode_FullMethodName     = "/AccountHttp/GetWebRegisterCode"
	AccountHttp_WebSMSLogin_FullMethodName            = "/AccountHttp/WebSMSLogin"
	AccountHttp_WebLogin_FullMethodName               = "/AccountHttp/WebLogin"
	AccountHttp_WebLogout_FullMethodName              = "/AccountHttp/WebLogout"
	AccountHttp_GetChangePwdCode_FullMethodName       = "/AccountHttp/GetChangePwdCode"
	AccountHttp_CheckCode_FullMethodName              = "/AccountHttp/CheckCode"
	AccountHttp_ChangePwdCode_FullMethodName          = "/AccountHttp/ChangePwdCode"
	AccountHttp_GetEmailCode_FullMethodName           = "/AccountHttp/GetEmailCode"
	AccountHttp_CheckEmail_FullMethodName             = "/AccountHttp/CheckEmail"
	AccountHttp_BypassAccountChangePWD_FullMethodName = "/AccountHttp/BypassAccountChangePWD"
	AccountHttp_AccountInfo_FullMethodName            = "/AccountHttp/AccountInfo"
)

// AccountHttpClient is the client API for AccountHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountHttpClient interface {
	// 获取手机注册验证码
	GetWebRegisterCode(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*UserPhoneResponse, error)
	// 手机注册验证码登录
	WebSMSLogin(ctx context.Context, in *UserPhoneCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 登录
	WebLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 退出登录
	WebLogout(ctx context.Context, in *UserLogOutRequest, opts ...grpc.CallOption) (*UserLogOutResponse, error)
	// 获取修改密码验证码
	GetChangePwdCode(ctx context.Context, in *GetChangePwdCodeRequest, opts ...grpc.CallOption) (*GetChangePwdCodeResponse, error)
	// 验证修改密码
	CheckCode(ctx context.Context, in *CheckCodeRequest, opts ...grpc.CallOption) (*CheckCodeResponse, error)
	// 修改密码
	ChangePwdCode(ctx context.Context, in *ChangePwdCodeRequest, opts ...grpc.CallOption) (*ChangePwdCodeResponse, error)
	// 获取邮箱验证码
	GetEmailCode(ctx context.Context, in *GetEmailCodeRequest, opts ...grpc.CallOption) (*GetEmailCodeResponse, error)
	// 检测邮箱验证码是否正确
	CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error)
	// 检测邮箱验证码是否正确
	BypassAccountChangePWD(ctx context.Context, in *BypassAccountChangePWDRequest, opts ...grpc.CallOption) (*BypassAccountChangePWDResponse, error)
	// token 鉴权
	AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error)
}

type accountHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountHttpClient(cc grpc.ClientConnInterface) AccountHttpClient {
	return &accountHttpClient{cc}
}

func (c *accountHttpClient) GetWebRegisterCode(ctx context.Context, in *UserPhoneRequest, opts ...grpc.CallOption) (*UserPhoneResponse, error) {
	out := new(UserPhoneResponse)
	err := c.cc.Invoke(ctx, AccountHttp_GetWebRegisterCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) WebSMSLogin(ctx context.Context, in *UserPhoneCodeRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AccountHttp_WebSMSLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) WebLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AccountHttp_WebLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) WebLogout(ctx context.Context, in *UserLogOutRequest, opts ...grpc.CallOption) (*UserLogOutResponse, error) {
	out := new(UserLogOutResponse)
	err := c.cc.Invoke(ctx, AccountHttp_WebLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) GetChangePwdCode(ctx context.Context, in *GetChangePwdCodeRequest, opts ...grpc.CallOption) (*GetChangePwdCodeResponse, error) {
	out := new(GetChangePwdCodeResponse)
	err := c.cc.Invoke(ctx, AccountHttp_GetChangePwdCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) CheckCode(ctx context.Context, in *CheckCodeRequest, opts ...grpc.CallOption) (*CheckCodeResponse, error) {
	out := new(CheckCodeResponse)
	err := c.cc.Invoke(ctx, AccountHttp_CheckCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) ChangePwdCode(ctx context.Context, in *ChangePwdCodeRequest, opts ...grpc.CallOption) (*ChangePwdCodeResponse, error) {
	out := new(ChangePwdCodeResponse)
	err := c.cc.Invoke(ctx, AccountHttp_ChangePwdCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) GetEmailCode(ctx context.Context, in *GetEmailCodeRequest, opts ...grpc.CallOption) (*GetEmailCodeResponse, error) {
	out := new(GetEmailCodeResponse)
	err := c.cc.Invoke(ctx, AccountHttp_GetEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error) {
	out := new(CheckEmailResponse)
	err := c.cc.Invoke(ctx, AccountHttp_CheckEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) BypassAccountChangePWD(ctx context.Context, in *BypassAccountChangePWDRequest, opts ...grpc.CallOption) (*BypassAccountChangePWDResponse, error) {
	out := new(BypassAccountChangePWDResponse)
	err := c.cc.Invoke(ctx, AccountHttp_BypassAccountChangePWD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHttpClient) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error) {
	out := new(AccountInfoResponse)
	err := c.cc.Invoke(ctx, AccountHttp_AccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountHttpServer is the server API for AccountHttp service.
// All implementations must embed UnimplementedAccountHttpServer
// for forward compatibility
type AccountHttpServer interface {
	// 获取手机注册验证码
	GetWebRegisterCode(context.Context, *UserPhoneRequest) (*UserPhoneResponse, error)
	// 手机注册验证码登录
	WebSMSLogin(context.Context, *UserPhoneCodeRequest) (*LoginResponse, error)
	// 登录
	WebLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	// 退出登录
	WebLogout(context.Context, *UserLogOutRequest) (*UserLogOutResponse, error)
	// 获取修改密码验证码
	GetChangePwdCode(context.Context, *GetChangePwdCodeRequest) (*GetChangePwdCodeResponse, error)
	// 验证修改密码
	CheckCode(context.Context, *CheckCodeRequest) (*CheckCodeResponse, error)
	// 修改密码
	ChangePwdCode(context.Context, *ChangePwdCodeRequest) (*ChangePwdCodeResponse, error)
	// 获取邮箱验证码
	GetEmailCode(context.Context, *GetEmailCodeRequest) (*GetEmailCodeResponse, error)
	// 检测邮箱验证码是否正确
	CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error)
	// 检测邮箱验证码是否正确
	BypassAccountChangePWD(context.Context, *BypassAccountChangePWDRequest) (*BypassAccountChangePWDResponse, error)
	// token 鉴权
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error)
	mustEmbedUnimplementedAccountHttpServer()
}

// UnimplementedAccountHttpServer must be embedded to have forward compatible implementations.
type UnimplementedAccountHttpServer struct {
}

func (UnimplementedAccountHttpServer) GetWebRegisterCode(context.Context, *UserPhoneRequest) (*UserPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebRegisterCode not implemented")
}
func (UnimplementedAccountHttpServer) WebSMSLogin(context.Context, *UserPhoneCodeRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebSMSLogin not implemented")
}
func (UnimplementedAccountHttpServer) WebLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLogin not implemented")
}
func (UnimplementedAccountHttpServer) WebLogout(context.Context, *UserLogOutRequest) (*UserLogOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLogout not implemented")
}
func (UnimplementedAccountHttpServer) GetChangePwdCode(context.Context, *GetChangePwdCodeRequest) (*GetChangePwdCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangePwdCode not implemented")
}
func (UnimplementedAccountHttpServer) CheckCode(context.Context, *CheckCodeRequest) (*CheckCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCode not implemented")
}
func (UnimplementedAccountHttpServer) ChangePwdCode(context.Context, *ChangePwdCodeRequest) (*ChangePwdCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePwdCode not implemented")
}
func (UnimplementedAccountHttpServer) GetEmailCode(context.Context, *GetEmailCodeRequest) (*GetEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailCode not implemented")
}
func (UnimplementedAccountHttpServer) CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedAccountHttpServer) BypassAccountChangePWD(context.Context, *BypassAccountChangePWDRequest) (*BypassAccountChangePWDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BypassAccountChangePWD not implemented")
}
func (UnimplementedAccountHttpServer) AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (UnimplementedAccountHttpServer) mustEmbedUnimplementedAccountHttpServer() {}

// UnsafeAccountHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountHttpServer will
// result in compilation errors.
type UnsafeAccountHttpServer interface {
	mustEmbedUnimplementedAccountHttpServer()
}

func RegisterAccountHttpServer(s grpc.ServiceRegistrar, srv AccountHttpServer) {
	s.RegisterService(&AccountHttp_ServiceDesc, srv)
}

func _AccountHttp_GetWebRegisterCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).GetWebRegisterCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_GetWebRegisterCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).GetWebRegisterCode(ctx, req.(*UserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_WebSMSLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).WebSMSLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_WebSMSLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).WebSMSLogin(ctx, req.(*UserPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_WebLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).WebLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_WebLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).WebLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_WebLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).WebLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_WebLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).WebLogout(ctx, req.(*UserLogOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_GetChangePwdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangePwdCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).GetChangePwdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_GetChangePwdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).GetChangePwdCode(ctx, req.(*GetChangePwdCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_CheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).CheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_CheckCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).CheckCode(ctx, req.(*CheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_ChangePwdCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePwdCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).ChangePwdCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_ChangePwdCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).ChangePwdCode(ctx, req.(*ChangePwdCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_GetEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).GetEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_GetEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).GetEmailCode(ctx, req.(*GetEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_CheckEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).CheckEmail(ctx, req.(*CheckEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_BypassAccountChangePWD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BypassAccountChangePWDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).BypassAccountChangePWD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_BypassAccountChangePWD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).BypassAccountChangePWD(ctx, req.(*BypassAccountChangePWDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHttp_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHttpServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountHttp_AccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHttpServer).AccountInfo(ctx, req.(*AccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountHttp_ServiceDesc is the grpc.ServiceDesc for AccountHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountHttp",
	HandlerType: (*AccountHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebRegisterCode",
			Handler:    _AccountHttp_GetWebRegisterCode_Handler,
		},
		{
			MethodName: "WebSMSLogin",
			Handler:    _AccountHttp_WebSMSLogin_Handler,
		},
		{
			MethodName: "WebLogin",
			Handler:    _AccountHttp_WebLogin_Handler,
		},
		{
			MethodName: "WebLogout",
			Handler:    _AccountHttp_WebLogout_Handler,
		},
		{
			MethodName: "GetChangePwdCode",
			Handler:    _AccountHttp_GetChangePwdCode_Handler,
		},
		{
			MethodName: "CheckCode",
			Handler:    _AccountHttp_CheckCode_Handler,
		},
		{
			MethodName: "ChangePwdCode",
			Handler:    _AccountHttp_ChangePwdCode_Handler,
		},
		{
			MethodName: "GetEmailCode",
			Handler:    _AccountHttp_GetEmailCode_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _AccountHttp_CheckEmail_Handler,
		},
		{
			MethodName: "BypassAccountChangePWD",
			Handler:    _AccountHttp_BypassAccountChangePWD_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _AccountHttp_AccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
