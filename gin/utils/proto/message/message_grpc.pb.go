// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PushService_PushInviteMessage_FullMethodName      = "/PushService/PushInviteMessage"
	PushService_WebFsAlarmPush_FullMethodName         = "/PushService/WebFsAlarmPush"
	PushService_FsAlarmPush_FullMethodName            = "/PushService/FsAlarmPush"
	PushService_WebFsAlarmRobotSet_FullMethodName     = "/PushService/WebFsAlarmRobotSet"
	PushService_WebFsAlarmRobotListGet_FullMethodName = "/PushService/WebFsAlarmRobotListGet"
	PushService_WebFsAlarmRobotDelete_FullMethodName  = "/PushService/WebFsAlarmRobotDelete"
)

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	// 查询系统配置信息
	PushInviteMessage(ctx context.Context, in *PushInvitedMessageRequest, opts ...grpc.CallOption) (*PushInvitedMessageResponse, error)
	// service 2
	// 飞书告警消息转发
	WebFsAlarmPush(ctx context.Context, in *FsAlarmPushRequest, opts ...grpc.CallOption) (*FsAlarmPushResponse, error)
	// 飞书告警消息转发
	FsAlarmPush(ctx context.Context, in *FsAlarmPushRequest, opts ...grpc.CallOption) (*FsAlarmPushResponse, error)
	// 飞书告警机器人信息设置
	WebFsAlarmRobotSet(ctx context.Context, in *WebFsAlarmRobotSetRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotSetResponse, error)
	// 飞书告警机器人信息列表获取
	WebFsAlarmRobotListGet(ctx context.Context, in *WebFsAlarmRobotListGetRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotListGetResponse, error)
	// 飞书告警机器人信息删除
	WebFsAlarmRobotDelete(ctx context.Context, in *WebFsAlarmRobotDeleteRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotDeleteResponse, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) PushInviteMessage(ctx context.Context, in *PushInvitedMessageRequest, opts ...grpc.CallOption) (*PushInvitedMessageResponse, error) {
	out := new(PushInvitedMessageResponse)
	err := c.cc.Invoke(ctx, PushService_PushInviteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) WebFsAlarmPush(ctx context.Context, in *FsAlarmPushRequest, opts ...grpc.CallOption) (*FsAlarmPushResponse, error) {
	out := new(FsAlarmPushResponse)
	err := c.cc.Invoke(ctx, PushService_WebFsAlarmPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) FsAlarmPush(ctx context.Context, in *FsAlarmPushRequest, opts ...grpc.CallOption) (*FsAlarmPushResponse, error) {
	out := new(FsAlarmPushResponse)
	err := c.cc.Invoke(ctx, PushService_FsAlarmPush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) WebFsAlarmRobotSet(ctx context.Context, in *WebFsAlarmRobotSetRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotSetResponse, error) {
	out := new(WebFsAlarmRobotSetResponse)
	err := c.cc.Invoke(ctx, PushService_WebFsAlarmRobotSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) WebFsAlarmRobotListGet(ctx context.Context, in *WebFsAlarmRobotListGetRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotListGetResponse, error) {
	out := new(WebFsAlarmRobotListGetResponse)
	err := c.cc.Invoke(ctx, PushService_WebFsAlarmRobotListGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) WebFsAlarmRobotDelete(ctx context.Context, in *WebFsAlarmRobotDeleteRequest, opts ...grpc.CallOption) (*WebFsAlarmRobotDeleteResponse, error) {
	out := new(WebFsAlarmRobotDeleteResponse)
	err := c.cc.Invoke(ctx, PushService_WebFsAlarmRobotDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility
type PushServiceServer interface {
	// 查询系统配置信息
	PushInviteMessage(context.Context, *PushInvitedMessageRequest) (*PushInvitedMessageResponse, error)
	// service 2
	// 飞书告警消息转发
	WebFsAlarmPush(context.Context, *FsAlarmPushRequest) (*FsAlarmPushResponse, error)
	// 飞书告警消息转发
	FsAlarmPush(context.Context, *FsAlarmPushRequest) (*FsAlarmPushResponse, error)
	// 飞书告警机器人信息设置
	WebFsAlarmRobotSet(context.Context, *WebFsAlarmRobotSetRequest) (*WebFsAlarmRobotSetResponse, error)
	// 飞书告警机器人信息列表获取
	WebFsAlarmRobotListGet(context.Context, *WebFsAlarmRobotListGetRequest) (*WebFsAlarmRobotListGetResponse, error)
	// 飞书告警机器人信息删除
	WebFsAlarmRobotDelete(context.Context, *WebFsAlarmRobotDeleteRequest) (*WebFsAlarmRobotDeleteResponse, error)
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (UnimplementedPushServiceServer) PushInviteMessage(context.Context, *PushInvitedMessageRequest) (*PushInvitedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushInviteMessage not implemented")
}
func (UnimplementedPushServiceServer) WebFsAlarmPush(context.Context, *FsAlarmPushRequest) (*FsAlarmPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFsAlarmPush not implemented")
}
func (UnimplementedPushServiceServer) FsAlarmPush(context.Context, *FsAlarmPushRequest) (*FsAlarmPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FsAlarmPush not implemented")
}
func (UnimplementedPushServiceServer) WebFsAlarmRobotSet(context.Context, *WebFsAlarmRobotSetRequest) (*WebFsAlarmRobotSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFsAlarmRobotSet not implemented")
}
func (UnimplementedPushServiceServer) WebFsAlarmRobotListGet(context.Context, *WebFsAlarmRobotListGetRequest) (*WebFsAlarmRobotListGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFsAlarmRobotListGet not implemented")
}
func (UnimplementedPushServiceServer) WebFsAlarmRobotDelete(context.Context, *WebFsAlarmRobotDeleteRequest) (*WebFsAlarmRobotDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebFsAlarmRobotDelete not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_PushInviteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushInvitedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushInviteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_PushInviteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushInviteMessage(ctx, req.(*PushInvitedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_WebFsAlarmPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsAlarmPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).WebFsAlarmPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_WebFsAlarmPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).WebFsAlarmPush(ctx, req.(*FsAlarmPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_FsAlarmPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsAlarmPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).FsAlarmPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_FsAlarmPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).FsAlarmPush(ctx, req.(*FsAlarmPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_WebFsAlarmRobotSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFsAlarmRobotSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).WebFsAlarmRobotSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_WebFsAlarmRobotSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).WebFsAlarmRobotSet(ctx, req.(*WebFsAlarmRobotSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_WebFsAlarmRobotListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFsAlarmRobotListGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).WebFsAlarmRobotListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_WebFsAlarmRobotListGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).WebFsAlarmRobotListGet(ctx, req.(*WebFsAlarmRobotListGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_WebFsAlarmRobotDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebFsAlarmRobotDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).WebFsAlarmRobotDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_WebFsAlarmRobotDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).WebFsAlarmRobotDelete(ctx, req.(*WebFsAlarmRobotDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushInviteMessage",
			Handler:    _PushService_PushInviteMessage_Handler,
		},
		{
			MethodName: "WebFsAlarmPush",
			Handler:    _PushService_WebFsAlarmPush_Handler,
		},
		{
			MethodName: "FsAlarmPush",
			Handler:    _PushService_FsAlarmPush_Handler,
		},
		{
			MethodName: "WebFsAlarmRobotSet",
			Handler:    _PushService_WebFsAlarmRobotSet_Handler,
		},
		{
			MethodName: "WebFsAlarmRobotListGet",
			Handler:    _PushService_WebFsAlarmRobotListGet_Handler,
		},
		{
			MethodName: "WebFsAlarmRobotDelete",
			Handler:    _PushService_WebFsAlarmRobotDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

const ()

// FeiShuServiceClient is the client API for FeiShuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeiShuServiceClient interface {
}

type feiShuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeiShuServiceClient(cc grpc.ClientConnInterface) FeiShuServiceClient {
	return &feiShuServiceClient{cc}
}

// FeiShuServiceServer is the server API for FeiShuService service.
// All implementations must embed UnimplementedFeiShuServiceServer
// for forward compatibility
type FeiShuServiceServer interface {
	mustEmbedUnimplementedFeiShuServiceServer()
}

// UnimplementedFeiShuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeiShuServiceServer struct {
}

func (UnimplementedFeiShuServiceServer) mustEmbedUnimplementedFeiShuServiceServer() {}

// UnsafeFeiShuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeiShuServiceServer will
// result in compilation errors.
type UnsafeFeiShuServiceServer interface {
	mustEmbedUnimplementedFeiShuServiceServer()
}

func RegisterFeiShuServiceServer(s grpc.ServiceRegistrar, srv FeiShuServiceServer) {
	s.RegisterService(&FeiShuService_ServiceDesc, srv)
}

// FeiShuService_ServiceDesc is the grpc.ServiceDesc for FeiShuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeiShuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeiShuService",
	HandlerType: (*FeiShuServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "message.proto",
}

const (
	FeiShuAlarmDB_AddFeiShuAlarmInfo_FullMethodName = "/FeiShuAlarmDB/AddFeiShuAlarmInfo"
	FeiShuAlarmDB_GetFeiShuAlarmInfo_FullMethodName = "/FeiShuAlarmDB/GetFeiShuAlarmInfo"
	FeiShuAlarmDB_DeleteAlarmInfo_FullMethodName    = "/FeiShuAlarmDB/DeleteAlarmInfo"
)

// FeiShuAlarmDBClient is the client API for FeiShuAlarmDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeiShuAlarmDBClient interface {
	// 添加告警组机器信息
	AddFeiShuAlarmInfo(ctx context.Context, in *AddFeiShuAlarmInfoDBRequest, opts ...grpc.CallOption) (*AddFeiShuAlarmInfoDBResponse, error)
	GetFeiShuAlarmInfo(ctx context.Context, in *GetFeiShuAlarmListDBRequest, opts ...grpc.CallOption) (*GetFeiShuAlarmListDBResponse, error)
	DeleteAlarmInfo(ctx context.Context, in *DeleteFeiShuAlarmInfoDBRequest, opts ...grpc.CallOption) (*DeleteFeiShuAlarmInfoDBResponse, error)
}

type feiShuAlarmDBClient struct {
	cc grpc.ClientConnInterface
}

func NewFeiShuAlarmDBClient(cc grpc.ClientConnInterface) FeiShuAlarmDBClient {
	return &feiShuAlarmDBClient{cc}
}

func (c *feiShuAlarmDBClient) AddFeiShuAlarmInfo(ctx context.Context, in *AddFeiShuAlarmInfoDBRequest, opts ...grpc.CallOption) (*AddFeiShuAlarmInfoDBResponse, error) {
	out := new(AddFeiShuAlarmInfoDBResponse)
	err := c.cc.Invoke(ctx, FeiShuAlarmDB_AddFeiShuAlarmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feiShuAlarmDBClient) GetFeiShuAlarmInfo(ctx context.Context, in *GetFeiShuAlarmListDBRequest, opts ...grpc.CallOption) (*GetFeiShuAlarmListDBResponse, error) {
	out := new(GetFeiShuAlarmListDBResponse)
	err := c.cc.Invoke(ctx, FeiShuAlarmDB_GetFeiShuAlarmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feiShuAlarmDBClient) DeleteAlarmInfo(ctx context.Context, in *DeleteFeiShuAlarmInfoDBRequest, opts ...grpc.CallOption) (*DeleteFeiShuAlarmInfoDBResponse, error) {
	out := new(DeleteFeiShuAlarmInfoDBResponse)
	err := c.cc.Invoke(ctx, FeiShuAlarmDB_DeleteAlarmInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeiShuAlarmDBServer is the server API for FeiShuAlarmDB service.
// All implementations must embed UnimplementedFeiShuAlarmDBServer
// for forward compatibility
type FeiShuAlarmDBServer interface {
	// 添加告警组机器信息
	AddFeiShuAlarmInfo(context.Context, *AddFeiShuAlarmInfoDBRequest) (*AddFeiShuAlarmInfoDBResponse, error)
	GetFeiShuAlarmInfo(context.Context, *GetFeiShuAlarmListDBRequest) (*GetFeiShuAlarmListDBResponse, error)
	DeleteAlarmInfo(context.Context, *DeleteFeiShuAlarmInfoDBRequest) (*DeleteFeiShuAlarmInfoDBResponse, error)
	mustEmbedUnimplementedFeiShuAlarmDBServer()
}

// UnimplementedFeiShuAlarmDBServer must be embedded to have forward compatible implementations.
type UnimplementedFeiShuAlarmDBServer struct {
}

func (UnimplementedFeiShuAlarmDBServer) AddFeiShuAlarmInfo(context.Context, *AddFeiShuAlarmInfoDBRequest) (*AddFeiShuAlarmInfoDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeiShuAlarmInfo not implemented")
}
func (UnimplementedFeiShuAlarmDBServer) GetFeiShuAlarmInfo(context.Context, *GetFeiShuAlarmListDBRequest) (*GetFeiShuAlarmListDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeiShuAlarmInfo not implemented")
}
func (UnimplementedFeiShuAlarmDBServer) DeleteAlarmInfo(context.Context, *DeleteFeiShuAlarmInfoDBRequest) (*DeleteFeiShuAlarmInfoDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlarmInfo not implemented")
}
func (UnimplementedFeiShuAlarmDBServer) mustEmbedUnimplementedFeiShuAlarmDBServer() {}

// UnsafeFeiShuAlarmDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeiShuAlarmDBServer will
// result in compilation errors.
type UnsafeFeiShuAlarmDBServer interface {
	mustEmbedUnimplementedFeiShuAlarmDBServer()
}

func RegisterFeiShuAlarmDBServer(s grpc.ServiceRegistrar, srv FeiShuAlarmDBServer) {
	s.RegisterService(&FeiShuAlarmDB_ServiceDesc, srv)
}

func _FeiShuAlarmDB_AddFeiShuAlarmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeiShuAlarmInfoDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeiShuAlarmDBServer).AddFeiShuAlarmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeiShuAlarmDB_AddFeiShuAlarmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeiShuAlarmDBServer).AddFeiShuAlarmInfo(ctx, req.(*AddFeiShuAlarmInfoDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeiShuAlarmDB_GetFeiShuAlarmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeiShuAlarmListDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeiShuAlarmDBServer).GetFeiShuAlarmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeiShuAlarmDB_GetFeiShuAlarmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeiShuAlarmDBServer).GetFeiShuAlarmInfo(ctx, req.(*GetFeiShuAlarmListDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeiShuAlarmDB_DeleteAlarmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeiShuAlarmInfoDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeiShuAlarmDBServer).DeleteAlarmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeiShuAlarmDB_DeleteAlarmInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeiShuAlarmDBServer).DeleteAlarmInfo(ctx, req.(*DeleteFeiShuAlarmInfoDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeiShuAlarmDB_ServiceDesc is the grpc.ServiceDesc for FeiShuAlarmDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeiShuAlarmDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeiShuAlarmDB",
	HandlerType: (*FeiShuAlarmDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeiShuAlarmInfo",
			Handler:    _FeiShuAlarmDB_AddFeiShuAlarmInfo_Handler,
		},
		{
			MethodName: "GetFeiShuAlarmInfo",
			Handler:    _FeiShuAlarmDB_GetFeiShuAlarmInfo_Handler,
		},
		{
			MethodName: "DeleteAlarmInfo",
			Handler:    _FeiShuAlarmDB_DeleteAlarmInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
