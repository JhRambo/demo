syntax = "proto3";

option go_package = "../utils/proto/server";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";


service  ServerDB {
  //获取服务器列表
  rpc ServerList(ServerListRequest) returns (ServerListResponse) {}
  //获取渲染服地址
  rpc GetRenderServerList(GetRenderServerListRequest) returns (GetRenderServerListResponse){}
  //获取服务器信息
  rpc GetRenderServerInfo(GetRenderServerInfoRequest) returns (GetRenderServerInfoResponse){}
  //获取服务器信息
  rpc UpdateRenderServerInfo(UpdateRenderServerInfoRequest) returns (UpdateRenderServerInfoResponse){}
  //获取解析服地址
  rpc GetFbxUploadUrl(GetFbxUploadUrlRequest) returns (GetFbxUploadUrlResponse) {}
  //获取设备连接地址
  rpc StartUE(StartUERequest) returns (StartUEResponse) {}
  //版本列表
  rpc GetVersionList(GetVersionListRequest) returns(GetVersionListResponse) {}
  //下载obs版本
  rpc VersionDownLoad(VersionDownLoadRequest) returns(VersionDownLoadResponse) {}
  //获取版本信息
  rpc GetVersionInfo(GetVersionInfoRequest) returns(GetVersionInfoResponse) {}
  //获取版本信息
  rpc CheckPakServerRestart(CheckPakServerRestartRequest) returns(CheckPakServerRestartResponse) {}
  //解析服重启（给解析服推送未解析文件 ）
  rpc PushParseFileList(PushParseFileListRequest) returns(PushParseFileListResponse) {}
  //获取版本信息
  rpc DownLoadParseFile(DownLoadParseFileRequest) returns(DownLoadParseFileResponse) {}
  //获取服务器日志文件列表
  rpc GetLogFile(GetLogFileRequest) returns(GetLogFileResponse) {}
  //请求开启代理
  rpc StartProxy(stream ProxyData) returns(stream ProxyData) {}
  //同步服重启
  rpc RestartSyncServer(RestartSyncServerRequest) returns(RestartSyncServerResponse) {}

  // 渲染/代理服务器踢出设备
  rpc ServerDeviceOut(ServerDeviceOutRequest) returns (ServerDeviceOutResponse){}
  // 渲染/代理服务器重启Steam
  rpc ServersRestartSteam(ServersRestartSteamRequest) returns (ServersRestartSteamResponse){}
  // 渲染/代理服务器重启App
  rpc ServersRestartApp(ServersRestartAppRequest) returns (ServersRestartAppResponse){}
  // 分配渲染/代理服务器地址
  rpc ServersAddr(ServersAddrRequest) returns (ServersAddrResponse){}
  // 同步/解析强制重启服务器
  rpc RestartServer(RestartServerRequest) returns (RestartServerResponse) {}
  // 获取服务器更新文件
  rpc GetUpdateFiles(GetUpdateFilesRequest) returns (GetUpdateFilesResponse){}
  // 服务器更新
  rpc UpdateVersion(UpdateVersionRequest) returns(UpdateVersionResponse) {}

}


//服务器信息
message Server{
  string serverID = 1;
  string serverAddr = 2;
  int32  serverType = 3;
  string version = 4;
  int32 state = 5;
  string updateVersion = 6;
  repeated string tags = 7;
  string createTime = 8;
  string updateTime = 9;
}


//用户信息
message ServerInfo{
  string serverID = 1;
  string serverAddr = 2;
  int32  serverType = 3;
  string version = 4;
  int32  state = 5;
  string updateVersion = 6;
  string device = 7;
  string createTime = 8;
  string updateTime = 9;
  string instanceId = 10;
  string agencyId = 11;
  string region = 12;
}

message ServerListRequest {
  int32  serverType = 2;  //0 所有 1房间服 2 解析服 3 业务服
}

message ServerListResponse {
  string message = 1;
  int32  code = 2;  //0 所有 1业务服 2房间服 3 解析服
  repeated Server list = 3;
  repeated google.protobuf.Struct data = 4;
}

message GetServerListRequest {
  string token = 1;
  int32  serverType = 2;  //0 所有 1房间服 2 解析服 3 业务服
}


message GetServerListResponse {
  string message = 1;
  int32  code = 2;  //0 所有 1业务服 2房间服 3 解析服
  repeated ServerInfo list = 3;
}

message UpdateServerRequest {
  string token = 1;
  string filePath = 2;  //更新路径版本
  string serverID = 3;
  repeated string serverIDs = 4; //需要升级的服务器ID列表
  repeated string pakList = 5; //更新组件包与基础包列表
  int32 updateType = 6; //更新类型:0-普通更新，1-强制更新，2-重新下载
}

message UpdateServerResponse {
  int32 code = 1;
  string message = 2;
}




message GetServerAddrRequest {
  string token = 1;
  string deviceId = 2;
  string area = 3;
  string version = 4;
}

message GetServerAddrResponse {
  int32  code = 1;  //0 所有 1房间服 2 解析服 3 业务服
  string message = 2;
  string ip = 3;
}

message StartVRRequest {
  string deviceName = 1;
  string addr = 2;
}

message StartVRResponse {
  int32  code = 1;  //0 所有 1房间服 2 解析服 3 业务服
  string message = 2;
  string ip = 3;
}

message StartPlanetRequest {
  string ip = 1;
}

message StartPlanetResponse {
  int32  code = 1;  //0 所有 1房间服 2 解析服 3 业务服
  string message = 2;
}

message ReStartStreamVRRequest {
  string token = 1;
  string addr = 2;
  repeated string addrList = 3;
}

message ReStartStreamVRResponse {
  int32  code = 1;
  string message = 2;
}


message ReStartAppRequest {
  string token = 1;
  string addr = 2;
  repeated string addrList = 3;
}

message ReStartAppResponse {
  int32  code = 1;
  string message = 2;
}


message GetFbxUploadUrlRequest {

}

//获取解析服务器地址
message GetFbxUploadUrlResponse {
  int32 code = 1;

  string message = 2;

  string url = 3;

  string completeUrl = 4;

}

enum UEType {
  StartServer = 0;
  StartRoom = 1;
  StartPak = 2;
  StartVR = 3;
  StartPlanet = 4;
  ReStartStreamVR = 5;
}

enum ServerType {
  ServerALL = 0;  //所有服务
  ServerSync = 1; //同步服
  ServerRender = 2; //渲染服
  ServerParse = 3; //解析服
  ServerProxy = 4; //代理服
}


message StartUERequest {
  UEType startType = 1;
  string jsonData = 2;
}

message StartUEResponse {

  int32 code = 1;

  string message = 2;

  string addr = 3;
}

message File {
  string fileName = 1;
  string filepath = 2;
  int64 LastModifiedTime = 3; //最后修改时间
  repeated string pakList = 4;
}
message GetUpdateFilesRequest{
  int32 fileType = 1;
  string serverID = 2;
  int32  serverType = 3;  //0 所有 1房间服 2 解析服 3 业务服
}
message GetUpdateFilesResponse{
  int32 code = 1;
  string message = 2;
  repeated File files = 3;
}

message GetVersionListRequest {
  string  addr = 1;
}

message VersionFile {
  string fileName = 1;
  int64 fileSize = 2;
}

message GetVersionListResponse {
  int32 code = 1;
  string message = 2;
  repeated VersionFile list = 3;
}


message VersionDownLoadRequest {
  string fileName = 1;
  int32 versionType = 2;
  repeated string pakList = 3;
//  string fileServer = 4;//内部服务器地址
  int32 updateType = 6; //更新类型:0-普通更新，1-强制更新，2-重新下载
}

message VersionDownLoadResponse {
  int32 code = 1;
  string message = 2;
}

message Version {
  string version = 1;
  string updateVersion = 2;
  int32 state = 3;
  string createTime = 4;
  string updateTime = 5;
}

message GetVersionInfoRequest {

}

message GetVersionInfoResponse {
  int32 code = 1;
  string message = 2;
  Version version = 3;
}

//渲染服消息体
message RenderServer {
  string serverID = 1; //服务器id，绑定网卡和cpu
  string serverAddr = 2;//服务器地址 grpc
  string internalAddr = 3;

  string version = 4; //当前版本号
  int32  state = 5; //版本状态
  string updateVersion = 6;//更新版本
  string createTime = 7; //版本创建时间
  string updateTime = 8; //版本更新时间

  string device = 9; //设备id
  string deviceName = 10; //设备备注
  int32  flag = 11;//服务器标识
  string serverName = 12;//服务器备注
  string enterpriseName = 13;//服务器备注
  int32 enterpriseId = 14;//服务器备注
  string licenseId = 15; //授权码
  string validDate = 16;
  bool proxyMode = 17;
  repeated int32 lflag = 18;//服务器标识

  string instanceId = 19;
  string agencyId = 20;
  string region = 21;


}

message GetRenderServerInfoRequest{}



message GetRenderServerInfoResponse{
  int32 code = 1;
  string message = 2;
  RenderServer info = 3;
}


message UpdateRenderServerInfoRequest{}



message UpdateRenderServerInfoResponse{
  int32 code = 1;
  string message = 2;
  RenderServer info = 3;
}




message CheckPakServerRestartRequest {

}

message CheckPakServerRestartResponse {
  int32 code = 1;
  string message = 2;
  bool reStart = 3; //是否重启
  int64 diskSize = 4;
}


message ParseFile {
  string fId = 1;
  string fileName = 2;
  int32  applyType = 3;
  string md5 = 4;
  string filePath = 5;
  int64  fileSize = 6;
  int32  userId = 7;
  int32  usertype = 8;

}




message PushParseFileListRequest {
  repeated ParseFile list = 1;
}

message PushParseFileListResponse {
  int32 code = 1;
  string message = 2;
}

message GetLogFileRequest{
  int32 root = 1; //1-同步服 2-渲染服
}
message GetLogFileResponse{
  repeated LogFileInfo list = 1;//路径下载地址
  int32 code = 2;
  string message = 3;
}
message LogFileInfo{
  string dir = 1;
  repeated pathInfo pathList = 2;//路径下载地址
  int32 total = 5;
}
message pathInfo {
  string path = 1;
  string lastTime = 2;
  string download = 3;
}

message GetLogFileListRequest{
  int32 root = 1; //1-同步服 2-渲染服
  string ip = 2; //服务器ip端口127.0.0.1:38601
  int32 pageIndex = 3;
  int32 pageSize = 4;
  string token = 5;
}
message GetLogFileListResponse{
  repeated LogFileInfo List = 1;//路径下载地址
  string wsAddr = 2; //websocket 地址
  int32 code = 3;
  string message = 4;
}

message DownLoadParseFileRequest {
  ParseFile file = 1;
}

message DownLoadParseFileResponse {
  int32 code = 1;
  string message = 2;
}


message GetInternalListRequest {
  string token = 1;
  string serverID = 2;
}

message GetInternalListResponse {
  int32 code = 1;
  string message = 2;
  repeated ServerListItem list = 3;
}

message ServerListItem {
  string serverID = 1;
  string ip = 2;
}

message RenderRegister {
  string serverId = 1;
  repeated string info = 2;
}


message ConsulInfo {
  string location = 1;
  string devId = 2;
  bool   ghsServer = 3;
  string internalAddr = 4;
}


enum Method {
  Method_Register = 0;
  Method_GetUpdateFiles = 1;
  Method_StartUE = 2;
  Method_UpdateVersion = 3;
  Method_GetVersionList = 4;
  Method_VersionDownLoad = 5;
  Method_GetVersionInfo = 6;
  Method_GetLogFile = 7;
  Method_Heart = 8;
  Method_GetRenderServerInfo = 9;
  Method_UpdateServerInfo = 10;
}



message ProxyData {
  Method messageType = 1;
  bytes data = 2;
}

//渲染服消息实体
message RenderServerGroupInfo{
  string enterpriseName = 1;
  int32 enterpriseId = 2;
  repeated RenderServer list = 3;
}

//获取渲染服服务器列表
message GetRenderServerListRequest {
  string token = 1;
  int32 pageIndex = 2;
  int32 pageSize = 3;
  string search = 4;
}
//获取渲染服服务器列表
message GetRenderServerListResponse {
  string message = 1;
  int32  code = 2;  //0 所有 1房间服 2 解析服 3 业务服
  repeated RenderServerGroupInfo list = 3;
  repeated RenderServer deviceOnLineList = 4;
  int32  total = 5;
}


message RestartSyncServerRequest {
  string token = 1;
  string serverId = 2;
}

message RestartSyncServerResponse {
  string message = 1;
  int32  code = 2;
}

//========================================================================
//渲染/代理服务器踢出设备
message ServerDeviceOutRequest {
  string addr = 1;//服务器
  string token = 2;
}

message ServerDeviceOutResponse{
  int32 code = 1;
  string message = 2;
}

//========================================================================
//渲染/代理服务器重启Steam
message ServersRestartSteamRequest {
  repeated string addrList = 1;//服务器地址列表
  string token = 2;
}

message ServersRestartSteamResponse{
  int32 code = 1;
  string message = 2;
}


//========================================================================
//渲染/代理服务器重启App
message ServersRestartAppRequest {
  repeated string addrList = 1;//服务器地址列表
  string token = 2;
}

message ServersRestartAppResponse{
  int32 code = 1;
  string message = 2;
}

//========================================================================
//分配渲染/代理服务器地址
message ServersAddrRequest {
  string deviceID = 1;//设备ID
  string area = 2;//区域
  string version = 3;//版本
  string token = 4;
}

message ServersAddrResponse{
  int32 code = 1;
  string message = 2;
  string addr = 3; //分配地址
}

//========================================================================
//同步/解析强制重启服务器
message RestartServerRequest {
  string token = 1;
  repeated string serverIDs = 3;
}

message RestartServerResponse {
  string message = 1;
  int32  code = 2;
}

//========================================================================
//获取更新版本列表
message GetServerUpdateFilesRequest {
  string token = 1;
  string serverID = 2;
  int32 fileType = 3;
}

message GetServerUpdateFilesResponse {
  int32 code = 1;
  string message = 2;
  repeated ServerFile files = 3;
}

message ServerFile {
  string fileName = 1;
  string filePath = 2;
  repeated string pakList = 3;
}

//========================================================================
// 服务器更新
message UpdateVersionRequest {
  string version = 1;//版本号
  int32 versionType = 2; //0更新同步服，1更新渲染服
  string serverID = 3;//更新的服务器id
//  string fileServer = 4;//内部服务器地址
  repeated  string pakList = 5; //更新组件包与基础包列表
  int32 updateType = 6; //更新类型:0-普通更新，1-强制更新，2-重新下载
}

message UpdateVersionResponse {
  int32 code = 1;
  string message = 2;
}



//服务器注册信息
message RegisterServerInfo{
  string serverId = 1;//服务器id
  string eid = 2;//企业id
  string deviceId = 3;//连接服务器设备
  string currentVersion = 4;//当前VR版本
  string updateVersion = 5;//更新VR版本
  string updateState = 6;//VR版本更新状态
  string updateTime = 7;//VR版本更新时间
  string internalAddr = 8;//内部地址
  string serverVersion = 9;//服务器版本
}




service  ServerHttp {
  rpc GetServerList(GetServerListRequest) returns (GetServerListResponse){
    option (google.api.http) = {
      post: "/v2/web/server/list"
      body: "*"
    };
  }

  //获取渲染服服务列表
  rpc GetRenderServerList(GetRenderServerListRequest) returns (GetRenderServerListResponse){
    option (google.api.http) = {
      post: "/v2/web/server/renderList"
      body: "*"
    };
  }

  rpc StartVR(StartVRRequest) returns (StartVRResponse){
    option (google.api.http) = {
      post: "/v2/server/startVR"
      body: "*"
    };
  }


  rpc StartPlanet(StartPlanetRequest) returns (StartPlanetResponse){
    option (google.api.http) = {
      post: "/v2/server/startPlanet"
      body: "*"
    };
  }

  rpc GetLogFileList(GetLogFileListRequest) returns (GetLogFileListResponse){
    option (google.api.http) = {
      post: "/v2/web/server/log/getList"
      body: "*"
    };
  }
  //内网更新,获取相同服务器内网地址
  rpc GetInternalList(GetInternalListRequest) returns (GetInternalListResponse){
    option (google.api.http) = {
      post: "/v2/web/server/internalList"
      body: "*"
    };
  }

  //渲染/代理服务器踢出设备
  rpc ServerDeviceOut(ServerDeviceOutRequest) returns (ServerDeviceOutResponse) {
    option (google.api.http) = {
      post: "/v2/web/server/device/out"
      body: "*"
    };
  }

  //渲染/代理服务器重启Steam
  rpc ServersRestartSteam(ServersRestartSteamRequest) returns (ServersRestartSteamResponse){
    option (google.api.http) = {
      post: "/v2/web/server/stream/restart"
      body: "*"
    };
  }

  // 渲染/代理服务器重启App
  rpc ServersRestartApp(ServersRestartAppRequest) returns (ServersRestartAppResponse){
    option (google.api.http) = {
      post: "/v2/web/server/app/restart"
      body: "*"
    };
  }

  //获取空闲渲染/代理服地址
  rpc ServersAddr(ServersAddrRequest) returns (ServersAddrResponse){
    option (google.api.http) = {
      post: "/v2/server/device/addr"
      body: "*"
    };
  }

  //同步/解析强制重启服务器
  rpc RestartServer(RestartServerRequest) returns (RestartServerResponse){
    option (google.api.http) = {
      post: "/v2/web/server/restart"
      body: "*"
    };
  }

  // 获取更新版本列表
  rpc GetUpdateFiles(GetServerUpdateFilesRequest) returns (GetServerUpdateFilesResponse){
    option (google.api.http) = {
      post: "/v2/web/server/files"
      body: "*"
    };
  }

  // 服务器更新
  rpc UpdateServer(UpdateServerRequest) returns (UpdateServerResponse){
    option (google.api.http) = {
      post: "/v2/web/server/update"
      body: "*"
    };
  }

}

