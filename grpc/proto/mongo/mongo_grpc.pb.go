// 协议类型

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: mongo.proto

package mongo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MongoHttp_Update_FullMethodName = "/MongoHttp/Update"
	MongoHttp_Create_FullMethodName = "/MongoHttp/Create"
	MongoHttp_Get_FullMethodName    = "/MongoHttp/Get"
)

// MongoHttpClient is the client API for MongoHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoHttpClient interface {
	Update(ctx context.Context, in *UpdateHttpRequest, opts ...grpc.CallOption) (*UpdateHttpResponse, error)
	Create(ctx context.Context, in *CreateHttpRequest, opts ...grpc.CallOption) (*CreateHttpResponse, error)
	Get(ctx context.Context, in *GetHttpRequest, opts ...grpc.CallOption) (*GetHttpResponse, error)
}

type mongoHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoHttpClient(cc grpc.ClientConnInterface) MongoHttpClient {
	return &mongoHttpClient{cc}
}

func (c *mongoHttpClient) Update(ctx context.Context, in *UpdateHttpRequest, opts ...grpc.CallOption) (*UpdateHttpResponse, error) {
	out := new(UpdateHttpResponse)
	err := c.cc.Invoke(ctx, MongoHttp_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoHttpClient) Create(ctx context.Context, in *CreateHttpRequest, opts ...grpc.CallOption) (*CreateHttpResponse, error) {
	out := new(CreateHttpResponse)
	err := c.cc.Invoke(ctx, MongoHttp_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mongoHttpClient) Get(ctx context.Context, in *GetHttpRequest, opts ...grpc.CallOption) (*GetHttpResponse, error) {
	out := new(GetHttpResponse)
	err := c.cc.Invoke(ctx, MongoHttp_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoHttpServer is the server API for MongoHttp service.
// All implementations must embed UnimplementedMongoHttpServer
// for forward compatibility
type MongoHttpServer interface {
	Update(context.Context, *UpdateHttpRequest) (*UpdateHttpResponse, error)
	Create(context.Context, *CreateHttpRequest) (*CreateHttpResponse, error)
	Get(context.Context, *GetHttpRequest) (*GetHttpResponse, error)
	mustEmbedUnimplementedMongoHttpServer()
}

// UnimplementedMongoHttpServer must be embedded to have forward compatible implementations.
type UnimplementedMongoHttpServer struct {
}

func (UnimplementedMongoHttpServer) Update(context.Context, *UpdateHttpRequest) (*UpdateHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMongoHttpServer) Create(context.Context, *CreateHttpRequest) (*CreateHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMongoHttpServer) Get(context.Context, *GetHttpRequest) (*GetHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMongoHttpServer) mustEmbedUnimplementedMongoHttpServer() {}

// UnsafeMongoHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoHttpServer will
// result in compilation errors.
type UnsafeMongoHttpServer interface {
	mustEmbedUnimplementedMongoHttpServer()
}

func RegisterMongoHttpServer(s grpc.ServiceRegistrar, srv MongoHttpServer) {
	s.RegisterService(&MongoHttp_ServiceDesc, srv)
}

func _MongoHttp_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoHttpServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoHttp_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoHttpServer).Update(ctx, req.(*UpdateHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoHttp_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoHttpServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoHttp_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoHttpServer).Create(ctx, req.(*CreateHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MongoHttp_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoHttpServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MongoHttp_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoHttpServer).Get(ctx, req.(*GetHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoHttp_ServiceDesc is the grpc.ServiceDesc for MongoHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MongoHttp",
	HandlerType: (*MongoHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _MongoHttp_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MongoHttp_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MongoHttp_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongo.proto",
}
