// 协议类型

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: binary.proto

package binary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BinaryHttp_UploadFile_FullMethodName = "/BinaryHttp/UploadFile"
)

// BinaryHttpClient is the client API for BinaryHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryHttpClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (BinaryHttp_UploadFileClient, error)
}

type binaryHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryHttpClient(cc grpc.ClientConnInterface) BinaryHttpClient {
	return &binaryHttpClient{cc}
}

func (c *binaryHttpClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (BinaryHttp_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &BinaryHttp_ServiceDesc.Streams[0], BinaryHttp_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &binaryHttpUploadFileClient{stream}
	return x, nil
}

type BinaryHttp_UploadFileClient interface {
	Send(*BinaryRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type binaryHttpUploadFileClient struct {
	grpc.ClientStream
}

func (x *binaryHttpUploadFileClient) Send(m *BinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *binaryHttpUploadFileClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinaryHttpServer is the server API for BinaryHttp service.
// All implementations must embed UnimplementedBinaryHttpServer
// for forward compatibility
type BinaryHttpServer interface {
	UploadFile(BinaryHttp_UploadFileServer) error
	mustEmbedUnimplementedBinaryHttpServer()
}

// UnimplementedBinaryHttpServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryHttpServer struct {
}

func (UnimplementedBinaryHttpServer) UploadFile(BinaryHttp_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedBinaryHttpServer) mustEmbedUnimplementedBinaryHttpServer() {}

// UnsafeBinaryHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryHttpServer will
// result in compilation errors.
type UnsafeBinaryHttpServer interface {
	mustEmbedUnimplementedBinaryHttpServer()
}

func RegisterBinaryHttpServer(s grpc.ServiceRegistrar, srv BinaryHttpServer) {
	s.RegisterService(&BinaryHttp_ServiceDesc, srv)
}

func _BinaryHttp_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinaryHttpServer).UploadFile(&binaryHttpUploadFileServer{stream})
}

type BinaryHttp_UploadFileServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*BinaryRequest, error)
	grpc.ServerStream
}

type binaryHttpUploadFileServer struct {
	grpc.ServerStream
}

func (x *binaryHttpUploadFileServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *binaryHttpUploadFileServer) Recv() (*BinaryRequest, error) {
	m := new(BinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BinaryHttp_ServiceDesc is the grpc.ServiceDesc for BinaryHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BinaryHttp",
	HandlerType: (*BinaryHttpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _BinaryHttp_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "binary.proto",
}
