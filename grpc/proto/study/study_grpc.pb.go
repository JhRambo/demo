// 协议类型

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: study.proto

package study

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StudyHttp_SayStudy_FullMethodName = "/StudyHttp/SayStudy"
)

// StudyHttpClient is the client API for StudyHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyHttpClient interface {
	// 具体接口名称
	SayStudy(ctx context.Context, in *StudyRequest, opts ...grpc.CallOption) (*StudyResponse, error)
}

type studyHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyHttpClient(cc grpc.ClientConnInterface) StudyHttpClient {
	return &studyHttpClient{cc}
}

func (c *studyHttpClient) SayStudy(ctx context.Context, in *StudyRequest, opts ...grpc.CallOption) (*StudyResponse, error) {
	out := new(StudyResponse)
	err := c.cc.Invoke(ctx, StudyHttp_SayStudy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyHttpServer is the server API for StudyHttp service.
// All implementations must embed UnimplementedStudyHttpServer
// for forward compatibility
type StudyHttpServer interface {
	// 具体接口名称
	SayStudy(context.Context, *StudyRequest) (*StudyResponse, error)
	mustEmbedUnimplementedStudyHttpServer()
}

// UnimplementedStudyHttpServer must be embedded to have forward compatible implementations.
type UnimplementedStudyHttpServer struct {
}

func (UnimplementedStudyHttpServer) SayStudy(context.Context, *StudyRequest) (*StudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayStudy not implemented")
}
func (UnimplementedStudyHttpServer) mustEmbedUnimplementedStudyHttpServer() {}

// UnsafeStudyHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyHttpServer will
// result in compilation errors.
type UnsafeStudyHttpServer interface {
	mustEmbedUnimplementedStudyHttpServer()
}

func RegisterStudyHttpServer(s grpc.ServiceRegistrar, srv StudyHttpServer) {
	s.RegisterService(&StudyHttp_ServiceDesc, srv)
}

func _StudyHttp_SayStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyHttpServer).SayStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyHttp_SayStudy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyHttpServer).SayStudy(ctx, req.(*StudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyHttp_ServiceDesc is the grpc.ServiceDesc for StudyHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StudyHttp",
	HandlerType: (*StudyHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayStudy",
			Handler:    _StudyHttp_SayStudy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "study.proto",
}
