// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserDBClient is the client API for UserDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDBClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
}

type userDBClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDBClient(cc grpc.ClientConnInterface) UserDBClient {
	return &userDBClient{cc}
}

func (c *userDBClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/UserDB/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDBServer is the server API for UserDB service.
// All implementations must embed UnimplementedUserDBServer
// for forward compatibility
type UserDBServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	mustEmbedUnimplementedUserDBServer()
}

// UnimplementedUserDBServer must be embedded to have forward compatible implementations.
type UnimplementedUserDBServer struct {
}

func (UnimplementedUserDBServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserDBServer) mustEmbedUnimplementedUserDBServer() {}

// UnsafeUserDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDBServer will
// result in compilation errors.
type UnsafeUserDBServer interface {
	mustEmbedUnimplementedUserDBServer()
}

func RegisterUserDBServer(s grpc.ServiceRegistrar, srv UserDBServer) {
	s.RegisterService(&UserDB_ServiceDesc, srv)
}

func _UserDB_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDBServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserDB/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDBServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDB_ServiceDesc is the grpc.ServiceDesc for UserDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserDB",
	HandlerType: (*UserDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserDB_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// UserHttpClient is the client API for UserHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserHttpClient interface {
	// 具体的远程服务方法
	Info(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type userHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewUserHttpClient(cc grpc.ClientConnInterface) UserHttpClient {
	return &userHttpClient{cc}
}

func (c *userHttpClient) Info(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserHttp/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserHttpServer is the server API for UserHttp service.
// All implementations must embed UnimplementedUserHttpServer
// for forward compatibility
type UserHttpServer interface {
	// 具体的远程服务方法
	Info(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	mustEmbedUnimplementedUserHttpServer()
}

// UnimplementedUserHttpServer must be embedded to have forward compatible implementations.
type UnimplementedUserHttpServer struct {
}

func (UnimplementedUserHttpServer) Info(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedUserHttpServer) mustEmbedUnimplementedUserHttpServer() {}

// UnsafeUserHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserHttpServer will
// result in compilation errors.
type UnsafeUserHttpServer interface {
	mustEmbedUnimplementedUserHttpServer()
}

func RegisterUserHttpServer(s grpc.ServiceRegistrar, srv UserHttpServer) {
	s.RegisterService(&UserHttp_ServiceDesc, srv)
}

func _UserHttp_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHttpServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserHttp/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHttpServer).Info(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserHttp_ServiceDesc is the grpc.ServiceDesc for UserHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserHttp",
	HandlerType: (*UserHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _UserHttp_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
