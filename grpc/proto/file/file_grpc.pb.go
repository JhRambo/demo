// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileHttpClient is the client API for FileHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileHttpClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileHttp_UploadFileClient, error)
}

type fileHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewFileHttpClient(cc grpc.ClientConnInterface) FileHttpClient {
	return &fileHttpClient{cc}
}

func (c *fileHttpClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileHttp_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileHttp_ServiceDesc.Streams[0], "/FileHttp/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileHttpUploadFileClient{stream}
	return x, nil
}

type FileHttp_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type fileHttpUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileHttpUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileHttpUploadFileClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileHttpServer is the server API for FileHttp service.
// All implementations must embed UnimplementedFileHttpServer
// for forward compatibility
type FileHttpServer interface {
	UploadFile(FileHttp_UploadFileServer) error
	mustEmbedUnimplementedFileHttpServer()
}

// UnimplementedFileHttpServer must be embedded to have forward compatible implementations.
type UnimplementedFileHttpServer struct {
}

func (UnimplementedFileHttpServer) UploadFile(FileHttp_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileHttpServer) mustEmbedUnimplementedFileHttpServer() {}

// UnsafeFileHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileHttpServer will
// result in compilation errors.
type UnsafeFileHttpServer interface {
	mustEmbedUnimplementedFileHttpServer()
}

func RegisterFileHttpServer(s grpc.ServiceRegistrar, srv FileHttpServer) {
	s.RegisterService(&FileHttp_ServiceDesc, srv)
}

func _FileHttp_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileHttpServer).UploadFile(&fileHttpUploadFileServer{stream})
}

type FileHttp_UploadFileServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileHttpUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileHttpUploadFileServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileHttpUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileHttp_ServiceDesc is the grpc.ServiceDesc for FileHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileHttp",
	HandlerType: (*FileHttpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileHttp_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
