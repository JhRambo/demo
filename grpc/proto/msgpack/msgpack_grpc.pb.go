// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msgpack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgpackHttpClient is the client API for MsgpackHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgpackHttpClient interface {
	//通用msgpack接口
	Binary(ctx context.Context, in *MsgpackHttpRequest, opts ...grpc.CallOption) (*MsgpackHttpResponse, error)
}

type msgpackHttpClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgpackHttpClient(cc grpc.ClientConnInterface) MsgpackHttpClient {
	return &msgpackHttpClient{cc}
}

func (c *msgpackHttpClient) Binary(ctx context.Context, in *MsgpackHttpRequest, opts ...grpc.CallOption) (*MsgpackHttpResponse, error) {
	out := new(MsgpackHttpResponse)
	err := c.cc.Invoke(ctx, "/MsgpackHttp/Binary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgpackHttpServer is the server API for MsgpackHttp service.
// All implementations must embed UnimplementedMsgpackHttpServer
// for forward compatibility
type MsgpackHttpServer interface {
	//通用msgpack接口
	Binary(context.Context, *MsgpackHttpRequest) (*MsgpackHttpResponse, error)
	mustEmbedUnimplementedMsgpackHttpServer()
}

// UnimplementedMsgpackHttpServer must be embedded to have forward compatible implementations.
type UnimplementedMsgpackHttpServer struct {
}

func (UnimplementedMsgpackHttpServer) Binary(context.Context, *MsgpackHttpRequest) (*MsgpackHttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Binary not implemented")
}
func (UnimplementedMsgpackHttpServer) mustEmbedUnimplementedMsgpackHttpServer() {}

// UnsafeMsgpackHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgpackHttpServer will
// result in compilation errors.
type UnsafeMsgpackHttpServer interface {
	mustEmbedUnimplementedMsgpackHttpServer()
}

func RegisterMsgpackHttpServer(s grpc.ServiceRegistrar, srv MsgpackHttpServer) {
	s.RegisterService(&MsgpackHttp_ServiceDesc, srv)
}

func _MsgpackHttp_Binary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgpackHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgpackHttpServer).Binary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MsgpackHttp/Binary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgpackHttpServer).Binary(ctx, req.(*MsgpackHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgpackHttp_ServiceDesc is the grpc.ServiceDesc for MsgpackHttp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgpackHttp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MsgpackHttp",
	HandlerType: (*MsgpackHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Binary",
			Handler:    _MsgpackHttp_Binary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msgpack.proto",
}
